<?xml version="1.0" encoding="UTF-8"?>
<con:testCase id="d07f05ed-76a3-4aec-904a-dccc6e56e56e" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="Write Events to DB" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="d07f05ed-76a3-4aec-904a-dccc6e56e56efileName">Write-Events-to-DB</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="datasource" name="Get Tournament From Text File" id="09efdc6a-0b0c-4e13-a9b2-98dffc46c42f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.teststeps.datasource.DataSourceContainer@prepared-properties">&lt;xml-fragment/></con:setting></con:settings><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Directory"><con:configuration><directory>C:/Users/michael.hawley/OneDrive - SmartBear Software, Inc</directory><filter>json-data-structure.json</filter><encoding/></con:configuration></con:dataSource><con:property>body</con:property><con:startRow/><con:endRow/><con:recordsPerIteration>1</con:recordsPerIteration><con:completeLastOperation>true</con:completeLastOperation><con:trimValues>false</con:trimValues><con:entitizeValues>false</con:entitizeValues><con:restartOnRun>true</con:restartOnRun><con:expandProperties>false</con:expandProperties></con:config></con:testStep><con:testStep type="datasource" name="EventInfo" id="562db92d-e829-48ca-8563-f3f27182d3f2"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="JSON"><con:configuration><sourceStep>Get Tournament From Text File</sourceStep><sourceProperty>body</sourceProperty><rowPath>$['events'][0]</rowPath><columnPath>Name</columnPath><columnPath>Format</columnPath><columnPath>No_of_players</columnPath><columnPath>Location</columnPath><columnPath>Date</columnPath></con:configuration></con:dataSource><con:property>Name</con:property><con:property>Format</con:property><con:property>No_of_players</con:property><con:property>Location</con:property><con:property>Date</con:property><con:startRow/><con:endRow/><con:recordsPerIteration>1</con:recordsPerIteration><con:completeLastOperation>true</con:completeLastOperation><con:trimValues>false</con:trimValues><con:entitizeValues>false</con:entitizeValues><con:restartOnRun>true</con:restartOnRun><con:expandProperties>false</con:expandProperties></con:config></con:testStep><con:testStep type="groovy" name="Event Props Transfer" id="6a371854-e5bf-441e-87a1-fa9a586a0139"><con:settings/><con:config><script>def name = context.expand( '${EventInfo#Name}' )
def format = context.expand( '${EventInfo#Format}' )
def no_of_players = context.expand( '${EventInfo#No_of_players}' )
def location = context.expand( '${EventInfo#Location}' )
def date = context.expand( '${EventInfo#Date}' )

testRunner.testCase.testSteps["Event DataSink"].setPropertyValue("name", name)
testRunner.testCase.testSteps["Event DataSink"].setPropertyValue("format", format)
testRunner.testCase.testSteps["Event DataSink"].setPropertyValue("no_of_players", no_of_players)
testRunner.testCase.testSteps["Event DataSink"].setPropertyValue("location", location)
testRunner.testCase.testSteps["Event DataSink"].setPropertyValue("date", date)</script></con:config></con:testStep><con:testStep type="datasink" name="Event DataSink" id="7deda044-afff-4574-b876-5450d647659f"><con:settings/><con:config xsi:type="con:DataSinkStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSink type="Data Connection"><con:configuration><Connection>mtg( Default environment )</Connection><query>insert into events (name, format, no_of_players, location, date)
values (?,?,?,?,?)</query><stored-procedure>false</stored-procedure></con:configuration></con:dataSink><con:properties><con:property><con:name>name</con:name><con:value>SCG Open Cincinatti</con:value></con:property><con:property><con:name>format</con:name><con:value>Standard</con:value></con:property><con:property><con:name>no_of_players</con:name><con:value>250</con:value></con:property><con:property><con:name>location</con:name><con:value>Cincinatti, OH</con:value></con:property><con:property><con:name>date</con:name><con:value>16/07/17</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="datasource" name="DeckInfo" id="09cc4755-43c1-4249-8c82-cf9cd70d0be0"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="JSON"><con:configuration><sourceStep>Get Tournament From Text File</sourceStep><sourceProperty>body</sourceProperty><rowPath>$['events'][0]['decks'][0]</rowPath><columnPath>Name</columnPath><columnPath>Player</columnPath><columnPath>Placing</columnPath></con:configuration></con:dataSource><con:property>Name</con:property><con:property>Player</con:property><con:property>Place</con:property><con:completeLastOperation>true</con:completeLastOperation><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="Deck Props Transfer" id="0d65dc68-8a4b-41c4-ab2b-a500d2754bef"><con:settings/><con:config><script>def name = context.expand( '${DeckInfo#Name}' )
def player = context.expand( '${DeckInfo#Player}' )
def place = context.expand( '${DeckInfo#Place}' )

testRunner.testCase.testSteps["Deck DataSink"].setPropertyValue("name", name)
testRunner.testCase.testSteps["Deck DataSink"].setPropertyValue("player", player)
testRunner.testCase.testSteps["Deck DataSink"].setPropertyValue("place", place)</script></con:config></con:testStep><con:testStep type="datasink" name="Deck DataSink" id="dd16a73b-60f9-481f-8c2e-d2a359d980d4"><con:settings/><con:config xsi:type="con:DataSinkStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSink type="Data Connection"><con:configuration><Connection>mtg( Default environment )</Connection><query>insert into decks(name,place,player) values (?,?,?);</query><stored-procedure>false</stored-procedure></con:configuration></con:dataSink><con:properties><con:property><con:name>name</con:name><con:value>4-Color Control</con:value></con:property><con:property><con:name>place</con:name><con:value>1</con:value></con:property><con:property><con:name>player</con:name><con:value>Michael Hamilton</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="datasource" name="ParseCards" id="35a73c0e-9c1f-4227-89d4-a230f41f67a1"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="JSON"><con:configuration><sourceStep>Get Tournament From Text File</sourceStep><sourceProperty>body</sourceProperty><rowPath>$['events'][0]['decks'][0]['cards']</rowPath><columnPath>Name</columnPath><columnPath>No_Played</columnPath><columnPath>Main</columnPath></con:configuration></con:dataSource><con:property>Name</con:property><con:property>Number Played</con:property><con:property>Main?</con:property><con:completeLastOperation>true</con:completeLastOperation><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="restrequest" name="Get Card Info By Name" id="507599b0-fd58-4470-af33-bb861f527cc7"><con:settings/><con:config service="https://api.magicthegathering.io" resourcePath="/v1/cards" methodName="Cards" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Card Info By Name" id="e7d28fd8-efc9-498b-8eb8-8c9b123ae88b" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://api.magicthegathering.io</con:endpoint><con:request/><con:originalUri>https://api.magicthegathering.io/v1/cards</con:originalUri><con:assertion type="JsonPath Match" id="258cd6ba-ba6c-4848-b23d-b007177cca58" name="Match content of [name]"><con:configuration><path>$['cards'][0]['name']</path><content>${Get Card Info By Name#Response#$['cards'][0]['name']}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="8709d0f0-be30-488e-b339-491c0742a910" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="582fa949-84d1-4ea2-89be-128611afabcd" name="Match Card Name"><con:configuration><scriptText>import groovy.json.JsonSlurper

def response = context.expand( '${Get Card Info By Name#Response#$[\'cards\']}' )
def jsonSlurper = new JsonSlurper().parseText(response)
def name = context.expand( '${Get Card Info By Name#name}' )
def card

assert !(jsonSlurper.isEmpty())
for (i in jsonSlurper) {
	if (i.name == name) {
		card = i.name
		
		assert card == name		
		break
	}
}</scriptText></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="078bcccd-331c-43b0-b4b8-ccbe56eb7716" name="Check for existence of [imageUrl]"><con:configuration><path>$['cards'][0]['imageUrl']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="63287abd-806e-47b7-899f-7aff530850ee" name="Validate colors, if card contains colors"><con:configuration><scriptText>import groovy.json.JsonSlurper

def response = context.expand( '${Get Card Info By Name#Response#$[\'cards\']}' )
def jsonSlurper = new JsonSlurper().parseText(response)

if (jsonSlurper.colors)
{
	assert !(jsonSlurper.colors.isEmpty())	
}</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="contains" value="imageUrl"/>
  <con:entry key="name" value="${ParseCards#Name}"/>
</con:parameters><con:parameterOrder><con:entry>name</con:entry><con:entry>contains</con:entry></con:parameterOrder><con:environmentSpec><con:entry environmentId="24e81e5f-0046-495e-9d8e-77f1fcf79adb"><con:authProfile>dev</con:authProfile></con:entry><con:entry environmentId="a9900a41-5ce9-4137-a3e7-22e856d0b6f0"><con:authProfile>No Authorization</con:authProfile></con:entry></con:environmentSpec></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Card Request Prop Transfer" id="b2ea977f-febd-4ac0-8858-caf479b9247f"><con:settings/><con:config><script>def colors = context.expand( '${Get Card Info By Name#Response#$[\'cards\'][0][\'colors\']}' )
def imageUrl = context.expand( '${Get Card Info By Name#Response#$[\'cards\'][0][\'imageUrl\']}' )

if (!colors.isEmpty()) {
	colors = colors.minus("[").minus("]")
} else {
	colors = "\"Colorless\""	
}
log.info colors


testRunner.testCase.testSteps["Cards DataSink"].setPropertyValue("colors", colors)
testRunner.testCase.testSteps["Cards DataSink"].setPropertyValue("image_url", imageUrl)</script></con:config></con:testStep><con:testStep type="datasink" name="Cards DataSink" id="5b5f48c1-a49c-4d95-8f21-d9229aa108f2"><con:settings/><con:config xsi:type="con:DataSinkStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSink type="Data Connection"><con:configuration><Connection>mtg( Default environment )</Connection><query>insert into cards(colors,image_url,main,name,no_played) values (?,?,?,?,?);</query><stored-procedure>false</stored-procedure></con:configuration></con:dataSink><con:properties><con:property><con:name>colors</con:name><con:value>"White","Blue"</con:value></con:property><con:property><con:name>image_url</con:name><con:value>http://gatherer.wizards.com/Handlers/Image.ashx?multiverseid=414494&amp;type=card</con:value></con:property><con:property><con:name>main</con:name><con:value>${ParseCards#Main?}</con:value></con:property><con:property><con:name>name</con:name><con:value>${ParseCards#Name}</con:value></con:property><con:property><con:name>no_played</con:name><con:value>${ParseCards#Number Played}</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="datasourceloop" name="Iterate Cards" id="5268988d-c3a9-4736-be6f-5d29abdab34e"><con:settings/><con:config><dataSourceStep>ParseCards</dataSourceStep><targetStep>Get Card Info By Name</targetStep></con:config></con:testStep><con:testStep type="datasourceloop" name="Iterate Decks" id="9706c223-b6e8-492f-9dd1-0604a469aa72"><con:settings/><con:config><dataSourceStep>ParseCards</dataSourceStep><targetStep>DeckInfo</targetStep></con:config></con:testStep><con:testStep type="datasourceloop" name="Iterate Events" id="dfb13f24-db31-432c-a213-3cd3338fb1de"><con:settings/><con:config><dataSourceStep>Get Tournament From Text File</dataSourceStep><targetStep>EventInfo</targetStep></con:config></con:testStep><con:properties><con:property><con:name>event_name</con:name><con:value>SCG Open Cincinatti</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5268988d-c3a9-4736-be6f-5d29abdab34e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>35a73c0e-9c1f-4227-89d4-a230f41f67a1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>dfb13f24-db31-432c-a213-3cd3338fb1de</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>dd16a73b-60f9-481f-8c2e-d2a359d980d4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5b5f48c1-a49c-4d95-8f21-d9229aa108f2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b2ea977f-febd-4ac0-8858-caf479b9247f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:environmentSpec><con:entry environmentId="24e81e5f-0046-495e-9d8e-77f1fcf79adb"><con:authProfile>Inherit From Parent</con:authProfile></con:entry></con:environmentSpec></con:testCase>